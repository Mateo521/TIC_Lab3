/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frames;

import javax.swing.JOptionPane;
import com.unsl.hamming.Hamming;
import com.unsl.hamming.Hamming.ResultadoHamming;
import static com.unsl.hamming.Hamming.blocksToBytes;
import static com.unsl.hamming.Hamming.bloquesToString;
import static com.unsl.hamming.Hamming.calcularParidadGlobal;
import static com.unsl.hamming.Hamming.calculateSyndromeGeneral;
import static com.unsl.hamming.Hamming.cargarArchivoCodificado;
import static com.unsl.hamming.Hamming.cargarArchivoCodificadoBinario;
import static com.unsl.hamming.Hamming.detectarYCorregirErrores;
import static com.unsl.hamming.Hamming.extraerDatosConCorreccion;
import static com.unsl.hamming.Hamming.extraerDatosSinCorreccion;
import static com.unsl.hamming.Hamming.guardarArchivoCodificado;
import static com.unsl.hamming.Hamming.procesoEnBloques;
import com.unsl.huffman.Codificar;
import java.awt.Dimension;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JEditorPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

/**
 *
 * @author mateo
 */
public class DesprotegerHamming extends javax.swing.JFrame {

    private List<List<Integer>> archivoDesprotegido;
    private List<List<Integer>> archivoOriginalCodificado;
    private int erroresDetectados = 0;
    private int erroresCorregidos = 0;

    /**
     * Creates new form DesprotegerHamming
     */
    public DesprotegerHamming() {
        setUndecorated(true);
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background1 = new javax.swing.JPanel();
        volver = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        desprotegerH = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        ruta_antes = new javax.swing.JTextField();
        jSantes = new javax.swing.JScrollPane();
        ANTES = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        DESPUES = new javax.swing.JEditorPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        corregido = new javax.swing.JTextArea();
        tituloHuffman1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        exitB1 = new javax.swing.JButton();
        tituloHuffman = new javax.swing.JLabel();
        estadisticas = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        background1.setBackground(new java.awt.Color(0, 102, 102));
        background1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        volver.setBackground(new java.awt.Color(0, 102, 102));
        volver.setFont(new java.awt.Font("OCR A Extended", 2, 20)); // NOI18N
        volver.setForeground(new java.awt.Color(255, 255, 255));
        volver.setText("VOLVER");
        volver.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                volverMouseClicked(evt);
            }
        });
        volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverActionPerformed(evt);
            }
        });
        background1.add(volver, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 520, -1, -1));

        jPanel2.setBackground(new java.awt.Color(0, 153, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel5.setBackground(new java.awt.Color(0, 102, 102));
        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        desprotegerH.setBackground(new java.awt.Color(0, 102, 102));
        desprotegerH.setFont(new java.awt.Font("OCR A Extended", 0, 26)); // NOI18N
        desprotegerH.setForeground(new java.awt.Color(255, 255, 255));
        desprotegerH.setText("Desproteger");
        desprotegerH.setBorder(null);
        desprotegerH.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        desprotegerH.setMaximumSize(new java.awt.Dimension(336, 36));
        desprotegerH.setMinimumSize(new java.awt.Dimension(336, 36));
        desprotegerH.setPreferredSize(new java.awt.Dimension(336, 36));
        desprotegerH.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                desprotegerHMouseClicked(evt);
            }
        });
        desprotegerH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desprotegerHActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(desprotegerH, javax.swing.GroupLayout.PREFERRED_SIZE, 194, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(desprotegerH, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 70, 210, 50));

        jPanel6.setBackground(new java.awt.Color(0, 102, 102));
        jPanel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel6.setLayout(null);

        jButton1.setFont(new java.awt.Font("OCR A Extended", 0, 18)); // NOI18N
        jButton1.setText("Seleccionar archivo \".HAx,HEx\"");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton1);
        jButton1.setBounds(10, 10, 410, 30);

        ruta_antes.setEditable(false);
        ruta_antes.setBackground(new java.awt.Color(204, 255, 255));
        ruta_antes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ruta_antesActionPerformed(evt);
            }
        });
        jPanel6.add(ruta_antes);
        ruta_antes.setBounds(440, 10, 510, 30);

        jPanel2.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 960, 50));

        ANTES.setEditable(false);
        ANTES.setBackground(new java.awt.Color(255, 255, 255));
        ANTES.setColumns(20);
        ANTES.setLineWrap(true);
        ANTES.setRows(5);
        ANTES.setWrapStyleWord(true);
        jSantes.setViewportView(ANTES);

        jPanel2.add(jSantes, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 350, 330));

        jScrollPane2.setViewportView(DESPUES);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 70, 370, 160));

        corregido.setColumns(20);
        corregido.setRows(5);
        jScrollPane1.setViewportView(corregido);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 250, 370, 150));

        tituloHuffman1.setBackground(new java.awt.Color(0, 102, 102));
        tituloHuffman1.setFont(new java.awt.Font("OCR A Extended", 1, 14)); // NOI18N
        tituloHuffman1.setForeground(new java.awt.Color(255, 255, 255));
        tituloHuffman1.setText("Texto corregido");
        tituloHuffman1.setToolTipText("");
        jPanel2.add(tituloHuffman1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 230, 120, -1));

        background1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 980, 410));

        jPanel3.setBackground(new java.awt.Color(0, 102, 102));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setFont(new java.awt.Font("OCR A Extended", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 204, 204));
        jLabel3.setText("Teoría de la Información y la Comunicación");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(510, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        background1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1030, 30));

        jPanel4.setBackground(new java.awt.Color(0, 102, 102));
        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        background1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 1030, 410));

        exitB1.setBackground(new java.awt.Color(0, 102, 102));
        exitB1.setFont(new java.awt.Font("OCR A Extended", 2, 20)); // NOI18N
        exitB1.setForeground(new java.awt.Color(255, 255, 255));
        exitB1.setText("SALIR");
        exitB1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitB1ActionPerformed(evt);
            }
        });
        background1.add(exitB1, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 520, 90, 30));

        tituloHuffman.setBackground(new java.awt.Color(0, 102, 102));
        tituloHuffman.setFont(new java.awt.Font("OCR A Extended", 1, 36)); // NOI18N
        tituloHuffman.setForeground(new java.awt.Color(255, 255, 255));
        tituloHuffman.setText("DESPROTEGER");
        tituloHuffman.setToolTipText("");
        background1.add(tituloHuffman, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 340, -1));

        estadisticas.setBackground(new java.awt.Color(204, 204, 204));
        estadisticas.setFont(new java.awt.Font("OCR A Extended", 0, 18)); // NOI18N
        estadisticas.setForeground(new java.awt.Color(43, 183, 246));
        estadisticas.setText("VER ESTADÍSTICAS");
        estadisticas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(43, 183, 246)));
        estadisticas.setEnabled(false);
        estadisticas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estadisticasActionPerformed(evt);
            }
        });
        background1.add(estadisticas, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 520, 190, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(background1, javax.swing.GroupLayout.PREFERRED_SIZE, 975, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volverMouseClicked
        // TODO add your handling code here:
        MainHamming m = new MainHamming();
        this.dispose();
        m.setVisible(true);
    }//GEN-LAST:event_volverMouseClicked

    private void volverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_volverActionPerformed

    private void desprotegerHMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_desprotegerHMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_desprotegerHMouseClicked

    private void desprotegerHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desprotegerHActionPerformed

        if (ruta_antes.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un archivo .HAx o .HEx", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            Object[] opciones = {"Con corrección", "Sin corrección"};
            int seleccion = JOptionPane.showOptionDialog(
                    null,
                    "¿Desea aplicar corrección de errores?",
                    "Decodificación",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    opciones,
                    opciones[0]
            );

            if (seleccion == 0) {
                decodificarConCorreccionGUI(ruta_antes.getText(), DESPUES);
            } else if (seleccion == 1) {
                decodificarSinCorreccionGUI(ruta_antes.getText(), DESPUES);
            }
        }

    }//GEN-LAST:event_desprotegerHActionPerformed

    public void decodificarConCorreccionGUI(String inputPath, JEditorPane resultadoArea) {

        try {

            resultadoArea.setContentType("text/html");

            int bloqueTamanio = deducirTamanioBloqueDesdeExtension(inputPath);
            List<List<Integer>> bloques = cargarArchivoCodificadoBinario(inputPath, bloqueTamanio);

            List<List<Integer>> bloquesDecodificados = new ArrayList<>();
            StringBuilder resultadoTexto = new StringBuilder("<html><body style='font-family:monospace;'>");

            for (int i = 0; i < bloques.size(); i++) {
                List<Integer> bloque = bloques.get(i);
                int globalParity = bloque.get(bloque.size() - 1);
                int calculado = calcularParidadGlobal(bloque.subList(0, bloque.size() - 1));
                boolean errorDetectado = globalParity != calculado;

                if (errorDetectado) {
                    erroresDetectados++;
                }

                resultadoTexto.append(bitsMarcandoCorreccionVisual(bloque)).append(" ");

                ResultadoHamming resultado = extraerDatosConCorreccion(bloque);
                List<Integer> datos = resultado.datos;
                if (resultado.huboCorreccion) {
                    erroresCorregidos++;
                }
                bloquesDecodificados.add(datos);
            }

            byte[] textoCorregido = blocksToBytes(bloquesDecodificados);

            this.archivoDesprotegido = bloquesDecodificados;

            String texto = new String(textoCorregido, StandardCharsets.UTF_8);

            corregido.setText(texto);

            // Guardar archivo decodificado
            String outputPath = inputPath.replace(".HA", ".DC").replace(".HE", ".DC");
            Files.write(Paths.get(outputPath), textoCorregido);

            JOptionPane.showMessageDialog(
                    null,
                    "Archivo corregido y guardado en: " + outputPath,
                    "Decodificación con corrección",
                    JOptionPane.INFORMATION_MESSAGE
            );

            resultadoArea.setText(resultadoTexto.toString());
            resultadoArea.setCaretPosition(0); // Mostrar desde el principio
            estadisticas.setEnabled(true);

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al procesar el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }

    private int deducirTamanioBloqueDesdeExtension(String path) {
        if (path.endsWith(".HA1") || path.endsWith(".HE1")) {
            return 8;
        }
        if (path.endsWith(".HA2") || path.endsWith(".HE2")) {
            return 256;
        }
        if (path.endsWith(".HA3") || path.endsWith(".HE3")) {
            return 4096;
        }

        throw new IllegalArgumentException("Extensión de archivo no válida o no reconocida: " + path);
    }

    public void decodificarSinCorreccionGUI(String inputPath, JEditorPane resultadoArea) {
        try {
            resultadoArea.setContentType("text/html");

            int bloqueTamanio = deducirTamanioBloqueDesdeExtension(inputPath);
            List<List<Integer>> bloques = cargarArchivoCodificadoBinario(inputPath, bloqueTamanio);

            List<List<Integer>> bloquesDecodificados = new ArrayList<>();
            StringBuilder resultadoTexto = new StringBuilder("<html><body style='font-family:monospace;'>");

            for (int i = 0; i < bloques.size(); i++) {
                List<Integer> bloque = bloques.get(i);
                int globalParity = bloque.get(bloque.size() - 1);
                int calculado = calcularParidadGlobal(bloque.subList(0, bloque.size() - 1));

                boolean errorDetectado = globalParity != calculado;

                if (errorDetectado) {
                    erroresDetectados++;
                }

                ResultadoHamming resultado = extraerDatosConCorreccion(bloque); // ahora obtienes el objeto
                List<Integer> datos = resultado.datos;                           // accedes a la lista de datos
                if (resultado.huboCorreccion) {
                    erroresCorregidos++; // contar solo si hubo una corrección real
                }

                resultadoTexto.append(bitsMarcandoErrorVisual(bloque)).append(" ");

                bloquesDecodificados.add(datos);
            }

            byte[] textoDecodificado = blocksToBytes(bloquesDecodificados);

            this.archivoDesprotegido = bloquesDecodificados;

            String texto = new String(textoDecodificado, StandardCharsets.UTF_8);

            corregido.setText(texto);

            String outputPath = inputPath.replace(".HA", ".DE").replace(".HE", ".DE");

            Files.write(Paths.get(outputPath), textoDecodificado);

            JOptionPane.showMessageDialog(
                    null,
                    "Archivo decodificado (sin corrección) guardado en: " + outputPath,
                    "Decodificación sin corrección",
                    JOptionPane.INFORMATION_MESSAGE
            );

            resultadoArea.setText(resultadoTexto.toString());

            estadisticas.setEnabled(true);

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al procesar el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private static String bitsConColor(List<Integer> original, List<Integer> corregido) {
        StringBuilder sb = new StringBuilder("<code>");
        for (int i = 0; i < original.size(); i++) {
            if (!original.get(i).equals(corregido.get(i))) {
                sb.append("<span style='color:red; font-weight:bold;'>").append(original.get(i)).append("</span>");
            } else {
                sb.append(original.get(i));
            }
        }
        sb.append("</code>");
        return sb.toString();
    }

    private static String bitsToHtml(List<Integer> bits) {
        StringBuilder sb = new StringBuilder("<code>");
        for (Integer bit : bits) {
            sb.append(bit);
        }
        sb.append("</code>");
        return sb.toString();
    }

    private static String bitsMarcandoParidadGlobal(List<Integer> bloque) {
        StringBuilder sb = new StringBuilder("<code>");
        for (int i = 0; i < bloque.size(); i++) {
            if (i == bloque.size() - 1) {
                sb.append("<span style='color:red; font-weight:bold;'>").append(bloque.get(i)).append("</span>");
            } else {
                sb.append(bloque.get(i));
            }
        }
        sb.append("</code>");
        return sb.toString();
    }

    public String bitsMarcandoCorreccionVisual(List<Integer> bloque) {
        // Separar bits sin paridad global
        List<Integer> sinGlobal = bloque.subList(0, bloque.size() - 1);
        int paridadGlobal = bloque.get(bloque.size() - 1);

        int syndrome = calculateSyndromeGeneral(sinGlobal);
        int calculado = calcularParidadGlobal(sinGlobal);
        boolean globalWrong = calculado != paridadGlobal;

        StringBuilder html = new StringBuilder();

        for (int i = 0; i < sinGlobal.size(); i++) {
            if (syndrome != 0 && i == syndrome - 1) {
                html.append("<span style='background-color: #90ee90;'>")
                        .append(sinGlobal.get(i))
                        .append("</span>");
            } else {
                html.append(sinGlobal.get(i));
            }
        }

        if (globalWrong) {
            html.append("<font color='orange'><b>").append(paridadGlobal).append("</b></font>");
        } else {
            html.append(paridadGlobal);
        }

        return html.toString();
    }

    public String bitsMarcandoErrorVisual(List<Integer> bloque) {
        // Separar bits sin paridad global
        List<Integer> sinGlobal = bloque.subList(0, bloque.size() - 1);
        int paridadGlobal = bloque.get(bloque.size() - 1);

        int syndrome = calculateSyndromeGeneral(sinGlobal);
        int calculado = calcularParidadGlobal(sinGlobal);
        boolean globalWrong = calculado != paridadGlobal;

        StringBuilder html = new StringBuilder();

        for (int i = 0; i < sinGlobal.size(); i++) {
            if (syndrome != 0 && i == syndrome - 1) {
                html.append("<font color='red'><b>").append(sinGlobal.get(i)).append("</b></font>");
            } else {
                html.append(sinGlobal.get(i));
            }
        }

        if (globalWrong) {
            html.append("<font color='orange'><b>").append(paridadGlobal).append("</b></font>");
        } else {
            html.append(paridadGlobal);
        }

        return html.toString();
    }


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        // TODO add your handling code here:
        Codificar.setArchivoEntrada("");
        Codificar.seleccionarArchivoConFiltro(
                new String[]{"HA1", "HA2", "HA3", "HE1", "HE2", "HE3"},
                "Archivos .HA1, .HA2 , .HA3 .HE1, .HE2 , .HE3",
                ruta_antes,
                ANTES, 1
        );

        if (!Codificar.getArchivoEntrada().isEmpty()) {
            ruta_antes.setText(Codificar.getArchivoEntrada());
            try {
                String textoPlanoSinEspacios = Codificar.abrirMensajeOriginal().replaceAll("\\s+", "");
                ANTES.setText(textoPlanoSinEspacios);
            } catch (IOException ex) {
                Logger.getLogger(CompactFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void ruta_antesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ruta_antesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ruta_antesActionPerformed

    private void estadisticasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estadisticasActionPerformed
        // TODO add your handling code here:  
        if (archivoDesprotegido == null || archivoDesprotegido.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay archivo decodificado cargado", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        StringBuilder stats = new StringBuilder();
        int blockCount = archivoDesprotegido.size();
        int bitsRecuperados = archivoDesprotegido.stream().mapToInt(List::size).sum();

        stats.append("ESTADÍSTICAS DE DECODIFICACIÓN\n");
        stats.append("==============================\n\n");
        stats.append("Cantidad de bloques: ").append(blockCount).append("\n");
        stats.append("Bits totales recuperados: ").append(bitsRecuperados).append("\n");
        stats.append("Errores detectados por paridad global: ").append(erroresDetectados).append("\n");
        stats.append("Errores corregidos (Hamming): ").append(erroresCorregidos).append("\n");

        double tasaRecuperacion = 100.0 * (blockCount - erroresCorregidos) / blockCount;
        stats.append(String.format("Tasa de bloques sin errores: %.2f%%\n", tasaRecuperacion));

        JTextArea textArea = new JTextArea(stats.toString());
        textArea.setEditable(false);
        textArea.setFont(new Font("Monospaced", Font.PLAIN, 12));
        JScrollPane scrollPane = new JScrollPane(textArea);
        scrollPane.setPreferredSize(new Dimension(600, 400));
        JOptionPane.showMessageDialog(this, scrollPane, "Estadísticas de Decodificación", JOptionPane.INFORMATION_MESSAGE);

        
        HistorialEstadisticas.guardar(new EstadisticasArchivo(
    EstadisticasArchivo.Tipo.DESPROTECCION,
    "archivoDesprotegido", 
    blockCount,
    0, 
    0,
    bitsRecuperados,
    erroresDetectados,
    erroresCorregidos,
    tasaRecuperacion,
    0 // overhead no aplica
));
        
        
        erroresDetectados = 0;
        erroresCorregidos = 0;

    }//GEN-LAST:event_estadisticasActionPerformed

    private void exitB1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitB1ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitB1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DesprotegerHamming.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DesprotegerHamming.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DesprotegerHamming.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DesprotegerHamming.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DesprotegerHamming().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea ANTES;
    private javax.swing.JEditorPane DESPUES;
    private javax.swing.JPanel background1;
    private javax.swing.JTextArea corregido;
    private javax.swing.JButton desprotegerH;
    private javax.swing.JButton estadisticas;
    private javax.swing.JButton exitB1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jSantes;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField ruta_antes;
    private javax.swing.JLabel tituloHuffman;
    private javax.swing.JLabel tituloHuffman1;
    private javax.swing.JButton volver;
    // End of variables declaration//GEN-END:variables
}
