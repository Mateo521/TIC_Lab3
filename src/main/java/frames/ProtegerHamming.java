/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frames;

import static frames.CompactFrame.compact;
import javax.swing.JOptionPane;
import com.unsl.hamming.Hamming;
import static com.unsl.hamming.Hamming.calcularParidadBitsHamming;
import static com.unsl.hamming.Hamming.esPotenciaDeDos;
import static com.unsl.hamming.Hamming.guardarArchivoCodificado;
import static com.unsl.hamming.Hamming.introducirDosErroresPorBloque;
import static com.unsl.hamming.Hamming.introducirUnErrorPorBloque;
import static com.unsl.hamming.Hamming.procesoEnBloques;
import com.unsl.huffman.Codificar;
import java.awt.Dimension;
import java.awt.Font;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

/**
 *
 * @author mateo
 */
public class ProtegerHamming extends javax.swing.JFrame {
private List<List<Integer>> archivoProtegido;

    /**
     * Creates new form ProtegerHamming
     */
    public ProtegerHamming() {
        setUndecorated(true);
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background1 = new javax.swing.JPanel();
        volver = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        protegerH = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        ruta_antes = new javax.swing.JTextField();
        jSantes = new javax.swing.JScrollPane();
        ANTES = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        DESPUES = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        exitB1 = new javax.swing.JButton();
        tituloHuffman = new javax.swing.JLabel();
        estadisticas = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        background1.setBackground(new java.awt.Color(0, 102, 102));
        background1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        volver.setBackground(new java.awt.Color(0, 102, 102));
        volver.setFont(new java.awt.Font("OCR A Extended", 2, 20)); // NOI18N
        volver.setForeground(new java.awt.Color(255, 255, 255));
        volver.setText("VOLVER");
        volver.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                volverMouseClicked(evt);
            }
        });
        volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverActionPerformed(evt);
            }
        });
        background1.add(volver, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 520, -1, -1));

        jPanel2.setBackground(new java.awt.Color(0, 153, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel5.setBackground(new java.awt.Color(0, 102, 102));
        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        protegerH.setBackground(new java.awt.Color(0, 102, 102));
        protegerH.setFont(new java.awt.Font("OCR A Extended", 0, 26)); // NOI18N
        protegerH.setForeground(new java.awt.Color(255, 255, 255));
        protegerH.setText("Proteger");
        protegerH.setBorder(null);
        protegerH.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        protegerH.setMaximumSize(new java.awt.Dimension(336, 36));
        protegerH.setMinimumSize(new java.awt.Dimension(336, 36));
        protegerH.setPreferredSize(new java.awt.Dimension(336, 36));
        protegerH.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                protegerHMouseClicked(evt);
            }
        });
        protegerH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                protegerHActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(protegerH, javax.swing.GroupLayout.PREFERRED_SIZE, 194, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(protegerH, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 70, 210, 50));

        jPanel6.setBackground(new java.awt.Color(0, 102, 102));
        jPanel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel6.setLayout(null);

        jButton1.setFont(new java.awt.Font("OCR A Extended", 0, 18)); // NOI18N
        jButton1.setText("Seleccionar archivo \".txt\" , \".docx\", \".huf\"");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton1);
        jButton1.setBounds(10, 10, 410, 30);

        ruta_antes.setEditable(false);
        ruta_antes.setBackground(new java.awt.Color(204, 255, 255));
        ruta_antes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ruta_antesActionPerformed(evt);
            }
        });
        jPanel6.add(ruta_antes);
        ruta_antes.setBounds(440, 10, 510, 30);

        jPanel2.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 960, 50));

        ANTES.setEditable(false);
        ANTES.setBackground(new java.awt.Color(255, 255, 255));
        ANTES.setColumns(20);
        ANTES.setLineWrap(true);
        ANTES.setRows(5);
        ANTES.setWrapStyleWord(true);
        jSantes.setViewportView(ANTES);

        jPanel2.add(jSantes, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 350, 330));

        DESPUES.setEditable(false);
        DESPUES.setBackground(new java.awt.Color(255, 255, 255));
        DESPUES.setColumns(20);
        DESPUES.setLineWrap(true);
        DESPUES.setRows(5);
        DESPUES.setWrapStyleWord(true);
        DESPUES.setBorder(null);
        jScrollPane1.setViewportView(DESPUES);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 70, 350, 330));

        background1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 980, 410));

        jPanel3.setBackground(new java.awt.Color(0, 102, 102));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setFont(new java.awt.Font("OCR A Extended", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 204, 204));
        jLabel3.setText("Teor√≠a de la Informacion y la Comunicacion");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(510, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        background1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1030, 30));

        jPanel4.setBackground(new java.awt.Color(0, 102, 102));
        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        background1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 1030, 410));

        exitB1.setBackground(new java.awt.Color(0, 102, 102));
        exitB1.setFont(new java.awt.Font("OCR A Extended", 2, 20)); // NOI18N
        exitB1.setForeground(new java.awt.Color(255, 255, 255));
        exitB1.setText("SALIR");
        exitB1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitB1ActionPerformed(evt);
            }
        });
        background1.add(exitB1, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 520, 90, 30));

        tituloHuffman.setBackground(new java.awt.Color(0, 102, 102));
        tituloHuffman.setFont(new java.awt.Font("OCR A Extended", 1, 36)); // NOI18N
        tituloHuffman.setForeground(new java.awt.Color(255, 255, 255));
        tituloHuffman.setText("PROTEGER");
        tituloHuffman.setToolTipText("");
        background1.add(tituloHuffman, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 210, -1));

        estadisticas.setBackground(new java.awt.Color(204, 204, 204));
        estadisticas.setFont(new java.awt.Font("OCR A Extended", 0, 18)); // NOI18N
        estadisticas.setForeground(new java.awt.Color(43, 183, 246));
        estadisticas.setText("VER ESTAD√çSTICAS");
        estadisticas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(43, 183, 246)));
        estadisticas.setEnabled(false);
        estadisticas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estadisticasActionPerformed(evt);
            }
        });
        background1.add(estadisticas, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 520, 190, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(background1, javax.swing.GroupLayout.PREFERRED_SIZE, 975, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volverMouseClicked
        // TODO add your handling code here:
        MainHamming m = new MainHamming();
        this.dispose();
        m.setVisible(true);
    }//GEN-LAST:event_volverMouseClicked

    private void volverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_volverActionPerformed

    private void protegerHMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_protegerHMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_protegerHMouseClicked

    private void protegerHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_protegerHActionPerformed

       if (ruta_antes.getText().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Debe seleccionar un archivo", "Error", JOptionPane.ERROR_MESSAGE);
    } else {
        ejecutarProteccionHamming(ruta_antes.getText(), DESPUES);
    }
        

    }//GEN-LAST:event_protegerHActionPerformed
public void ejecutarProteccionHamming(String inputPath, JTextArea resultadoArea) {
    Object[] opcionesBloque = {"8 bits (.HA1)", "256 bits (.HA2)", "4096 bits (.HA3)"};
    int seleccionBloque = JOptionPane.showOptionDialog(
            null,
            "Seleccione el tama√±o de bloque para Hamming:",
            "Configuraci√≥n de Bloque",
            JOptionPane.DEFAULT_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,
            opcionesBloque,
            opcionesBloque[0]
    );
    if (seleccionBloque < 0) return;

    Object[] opcionesError = {"Sin errores", "1 Error por bloque", "2 Errores por bloque"};
    int seleccionError = JOptionPane.showOptionDialog(
            null,
            "¬øDesea introducir errores en el archivo protegido?",
            "Introducci√≥n de Errores",
            JOptionPane.DEFAULT_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,
            opcionesError,
            opcionesError[0]
    );
    if (seleccionError < 0) return;

    // Llama al proceso final
    procesarProteccionHamming(inputPath, seleccionBloque + 1, seleccionError, resultadoArea);
}
  

public void procesarProteccionHamming(String inputPath, int opcionBloque, int opcionError, JTextArea resultadoArea) {
    int bloqueTamanio;
    String extension;
    switch (opcionBloque) {
        case 1:
            bloqueTamanio = 8;
            extension = ".HA1";
            break;
        case 2:
            bloqueTamanio = 256;
            extension = ".HA2";
            break;
        case 3:
            bloqueTamanio = 4096;
            extension = ".HA3";
            break;
        default:
            JOptionPane.showMessageDialog(null, "Opci√≥n de bloque inv√°lida.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
    }

    try {
        String contenido = new String(Files.readAllBytes(Paths.get(inputPath)));
        String baseName = inputPath.substring(0, inputPath.lastIndexOf('.'));
        List<List<Integer>> bloquesCodificados = procesoEnBloques(contenido, bloqueTamanio);
        this.archivoProtegido = bloquesCodificados;

        switch (opcionError) {
            case 1:
                introducirUnErrorPorBloque(bloquesCodificados);
                extension = extension.replace("HA", "HE");
                break;
            case 2:
                introducirDosErroresPorBloque(bloquesCodificados);
                extension = extension.replace("HA", "HE");
                break;
        }

        String outputPath = baseName + extension;
        guardarArchivoCodificado(bloquesCodificados, outputPath);

        String message = "El archivo fue protegido";
        if (opcionError > 0) {
            message += " y se introdujeron " + opcionError + (opcionError == 1 ? " error" : " errores") + " por bloque";
        }
        message += ".\nGuardado en: " + outputPath;

        JOptionPane.showMessageDialog(null, message, "Operaci√≥n exitosa", JOptionPane.INFORMATION_MESSAGE);

        StringBuilder resultado = new StringBuilder();
        for (List<Integer> bloque : bloquesCodificados) {
            for (Integer bit : bloque) {
                resultado.append(bit);
            }
            
        }
        resultadoArea.setText(resultado.toString());
        estadisticas.setEnabled(true);
    } catch (IOException e) {
        JOptionPane.showMessageDialog(null, "Error al procesar el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
   


    private int promptForErrorCount() {
        Object[] options = {"Sin errores", "1 Error", "2 Errores"};
        int response = JOptionPane.showOptionDialog(
                null,
                "Seleccione cuantos errores desea ingresar:",
                "Introducir errores",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]
        );

        // Convert the response to number of errors
        return response; // 0 = none, 1 = 1 error, 2 = 2 errors
    }


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Codificar.setArchivoEntrada("");
        Codificar.seleccionarArchivoConFiltro(
                new String[]{"txt", "docx", "huf"},
                "Archivos .txt, .docx o .huf",
                ruta_antes,
                ANTES,0
        );

        if (!Codificar.getArchivoEntrada().isEmpty()) {
            ruta_antes.setText(Codificar.getArchivoEntrada());

            try {
                ANTES.setText(Codificar.abrirMensajeOriginal());
            } catch (IOException ex) {
                Logger.getLogger(CompactFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void ruta_antesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ruta_antesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ruta_antesActionPerformed

    private void estadisticasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estadisticasActionPerformed
        // TODO add your handling code here:

        StringBuilder stats = new StringBuilder();

      
        if (archivoProtegido == null || archivoProtegido.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay archivo protegido cargado", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

 
        int totalOriginalBits = 0;
        int totalProtectedBits = 0;
        int totalParityBits = 0;
        int totalDataBitsInProtected = 0;
        int totalHammingParityBits = 0;
        int totalGlobalParityBits = 0;
        int blockCount = archivoProtegido.size();

       
        List<Integer> firstBlock = archivoProtegido.get(0);
        int originalBlockSize = firstBlock.size() - calcularParidadBitsHamming(firstBlock.size()) - 1; // -1 for global bit
        int protectedBlockSize = firstBlock.size();

     
        for (List<Integer> block : archivoProtegido) {
            totalOriginalBits += originalBlockSize;
            totalProtectedBits += block.size();
            totalParityBits += (block.size() - originalBlockSize);

            int hammingParityBits = calcularParidadBitsHamming(originalBlockSize);
            totalHammingParityBits += hammingParityBits;
            totalGlobalParityBits += 1; 

        
            int dataBits = 0;
            for (int i = 0; i < block.size() - 1; i++) { 
                if (!esPotenciaDeDos(i + 1)) {
                    dataBits++;
                }
            }
            totalDataBitsInProtected += dataBits;
        }

    
        stats.append("ESTAD√çSTICAS DE PROTECCI√ìN HAMMING\n");
        stats.append("==================================\n\n");
        String rutaSeleccionada = Codificar.getArchivoEntrada();
        stats.append(String.format("Archivo: %s\n", !rutaSeleccionada.isEmpty() ? rutaSeleccionada : "N/A"));

        stats.append(String.format("Cantidad de m√≥dulos (bloques): %d\n\n", blockCount));

        stats.append("Por m√≥dulo:\n");
        stats.append(String.format(" - Bits originales (informaci√≥n): %d\n", originalBlockSize));
        stats.append(String.format(" - Bits de paridad Hamming: %d\n", calcularParidadBitsHamming(originalBlockSize)));
        stats.append(String.format(" - Bit de paridad global: 1\n"));
        stats.append(String.format(" - Tama√±o protegido: %d bits\n\n", protectedBlockSize));

        stats.append("Totales del archivo:\n");
        stats.append(String.format(" - Bits originales totales: %d\n", totalOriginalBits));
        stats.append(String.format(" - Bits de paridad Hamming totales: %d\n", totalHammingParityBits));
        stats.append(String.format(" - Bits de paridad global totales: %d\n", totalGlobalParityBits));
        stats.append(String.format(" - Tama√±o protegido total: %d bits\n\n", totalProtectedBits));

        stats.append("Detalle de bits por m√≥dulo:\n");
        stats.append(" - Bits de control (paridad Hamming): posiciones ");
        for (int i = 0; i < calcularParidadBitsHamming(originalBlockSize); i++) {
            int pos = (int) Math.pow(2, i);
            stats.append(pos).append(", ");
        }
        stats.delete(stats.length() - 2, stats.length()); // Remove last ", "
        stats.append("\n");
        stats.append(String.format(" - Bits de informaci√≥n: %d posiciones no potencias de 2\n", originalBlockSize));
        stats.append(" - Bit global: √∫ltima posici√≥n del m√≥dulo\n");

        stats.append("\nOverhead:\n");
        double overhead = ((double) (totalProtectedBits - totalOriginalBits) / totalOriginalBits) * 100;
        stats.append(String.format(" - Tasa de protecci√≥n: %.2f%%\n", overhead));
        stats.append(String.format(" - Relaci√≥n bits informaci√≥n:protecci√≥n: 1:%.2f",
                (double) (totalProtectedBits - totalOriginalBits) / totalOriginalBits));

     
        JTextArea textArea = new JTextArea(stats.toString());
        textArea.setEditable(false);
        textArea.setFont(new Font("Monospaced", Font.PLAIN, 12));
        JScrollPane scrollPane = new JScrollPane(textArea);
        scrollPane.setPreferredSize(new Dimension(600, 400));
        JOptionPane.showMessageDialog(this, scrollPane, "Estad√≠sticas de Protecci√≥n", JOptionPane.INFORMATION_MESSAGE);


    }//GEN-LAST:event_estadisticasActionPerformed

    private void exitB1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitB1ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitB1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProtegerHamming.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProtegerHamming.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProtegerHamming.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProtegerHamming.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProtegerHamming().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea ANTES;
    private javax.swing.JTextArea DESPUES;
    private javax.swing.JPanel background1;
    private javax.swing.JButton estadisticas;
    private javax.swing.JButton exitB1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jSantes;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton protegerH;
    private javax.swing.JTextField ruta_antes;
    private javax.swing.JLabel tituloHuffman;
    private javax.swing.JButton volver;
    // End of variables declaration//GEN-END:variables
}
